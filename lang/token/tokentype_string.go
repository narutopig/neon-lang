// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NumType-0]
	_ = x[StrType-1]
	_ = x[BoolType-2]
	_ = x[VoidType-3]
	_ = x[True-4]
	_ = x[False-5]
	_ = x[Def-6]
	_ = x[Return-7]
	_ = x[If-8]
	_ = x[Elif-9]
	_ = x[While-10]
	_ = x[Equality-11]
	_ = x[NotEqual-12]
	_ = x[LessEq-13]
	_ = x[GreaterEq-14]
	_ = x[Less-15]
	_ = x[Greater-16]
	_ = x[StrLiteral-17]
	_ = x[NumLiteral-18]
	_ = x[Id-19]
	_ = x[AddSub-20]
	_ = x[MulDivMod-21]
	_ = x[Comma-22]
	_ = x[Semi-23]
	_ = x[Lp-24]
	_ = x[Rp-25]
	_ = x[Lb-26]
	_ = x[Rb-27]
	_ = x[Lc-28]
	_ = x[Rc-29]
	_ = x[Equal-30]
	_ = x[Bang-31]
}

const _TokenType_name = "NumTypeStrTypeBoolTypeVoidTypeTrueFalseDefReturnIfElifWhileEqualityNotEqualLessEqGreaterEqLessGreaterStrLiteralNumLiteralIdAddSubMulDivModCommaSemiLpRpLbRbLcRcEqualBang"

var _TokenType_index = [...]uint8{0, 7, 14, 22, 30, 34, 39, 42, 48, 50, 54, 59, 67, 75, 81, 90, 94, 101, 111, 121, 123, 129, 138, 143, 147, 149, 151, 153, 155, 157, 159, 164, 168}

func (i TokenType) String() string {
	if i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
